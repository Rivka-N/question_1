//hotel class
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace part2
{
    class HostingUnit
    {
        public bool[,] diary;//state of hosting unit occupancy

        public HostingUnit()//c-tor
        {
           diary = new bool[12, 31];//creates array
           for (int i = 0; i < 12; i++)
            {
               for (int j = 0; j < 31; j++)
                {
                    diary[i, j] = false;//initializes all the array to be false
                }
            }
        }
        public bool OrderStay()//orders a place in the hotel. if succeeded returns true. false otherwise
        {
            Console.WriteLine("enter day and month of stay");
            int day = Convert.ToInt32(Console.ReadLine());
            int month = Convert.ToInt32(Console.ReadLine());
            DateTime date = new DateTime(2020, month, day);
            Console.WriteLine("how many days is your stay?");
            int stay = Convert.ToInt32(Console.ReadLine());
            return checkDates(date, stay);
        }

        public bool checkDates (DateTime date, int stayLen)
        {
            for (int i = 1, d = date.Day, m = date.Month; i < stayLen - 1; i++, d++)//checks all but the last day
            {
                if (d > 31)//goes to next month
                {
                    d = 1;
                    m = m + 1;//goes to next month
                }
                if (diary[m, d] == true)//if it's booked
                  return false;//not available
            }
            for (int i = 0, d = date.Month, m = date.Month; i < stayLen - 1; i++, d++)
            {
                //the last day's night isn't booked because he leaves in the morning
                if (d > 31)//goes to next month
                {
                    d = 1;
                    m = m + 1;//goes to next month
                }
                diary[m, d] = true;//updates to true
            }
            return true;
        }
        
         public void FullDays( )
        {
            for (int i=1; i<12; i++)
            {
                for(int j=1;j<31;j++ )
                {
                    if (diary[i, j] == true)
                    {
                        DateTime date1 = new DateTime(2000, i, j);
                        DateTime date2 = new DateTime(2000, i, j);
                        i++;j++;
                        while (diary[i, j] == true)
                        {
                            date2 = date2.AddDays(1);
                            i++;j++;
                        }
                        string format="dd/MM";
                        Console.Write(date1.ToString(format));
                        Console.Write("-"+date2.ToString(format));

                    }
                }
            }
            
            public void TotalDays()
        {
            int count = 0;
            for (int i = 1; i < 12; i++)
            {
                for (int j = 1; j < 31; j++)
                {
                    if (diary[i, j] == true)
                        count++;
                }
            }
            Console.WriteLine("the total days"+count);
            Console.WriteLine(count/365.0)
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {
            int ch=0;
            Console.WriteLine("Choose one of the following: ");
            Console.WriteLine("1: If you want to book a vacation");
            Console.WriteLine("2:Order that will occupy for the current year");
            Console.WriteLine("3:Total number of days occupied");
            Console.WriteLine("4:exit ");
            do
            {
                ch = Convert.ToInt32(Console.ReadLine()); 
                switch (ch)
                {
                    case 1: 
                        break;
                    case 2:
                        break;
                    case 3:
                        break;
                    case 4:
                        break;
                    default:
                        break;

                }

            } while (ch != 4);

        }
    }
}


